package shared

import (
	"crypto/ecdsa"
	"math/big"
)

// Coordinates of an element in game
type Coord struct {
	X float64
	Y float64
}

type GameConfig struct {
	Connections 		[]PlayerConn
	Identifier 			int
	InitState			InitialGameSettings
	// Reward for catching prey
	Points				uint32
	// Hearbeat settings
	GlobalServerHB		uint32
	// Number of times we ping another player before we drop them
	Ping				uint32
}

// Initial game settings sent out by global server to start the game
type InitialGameSettings struct {
	// Size of game screen
	WindowsX			float64
	WindowsY			float64

	// Size of player sprites
	SpriteMin			float64
	SpriteMax			float64
	SpriteStep			float64
	SpriteCoordinates 	Coord

	// Walls
	WallCoordinates		[]Coord
}

// Game state sent by other player, or from this player
type GameState struct {
	PlayerId			uint32
	PlayerLoc			Coord
	Timestamp			uint64
	LastUpdated			uint64
	HighestScore 		uint32
}

// Move commitment sent by player, must be ACK'ed by all other players in game
// before this player can receive all other players' game states
type MoveCommit struct {
	GameState      		GameState
	MoveCommitHash 		string
	PubKey         		ecdsa.PublicKey
	Signature			Sig
}

// Signature generated by ecdsa for the hashing of the move commit
type Sig struct {
	R 					*big.Int
	S 					*big.Int
}

// Player connection details
type PlayerConn struct {
	PubKey				ecdsa.PublicKey
	playerIP			string
}